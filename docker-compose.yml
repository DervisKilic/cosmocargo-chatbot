services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
        NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    develop:
      watch:
        - action: rebuild
          path: ./frontend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
        CONNECTION_STRING: ${CONNECTION_STRING:-Host=db;Port=5432;Database=cosmocargo;Username=postgres;Password=postgres}
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-pull:
        condition: service_completed_successfully
    volumes:
      - ./backend:/src
      - /src/obj
      - /src/bin
    environment:
      OLLAMA_URL: http://ollama:11434
      OLLAMA_MODEL: gemma3:12b
      OLLAMA_CTX: ${OLLAMA_CTX:-1024}
      OLLAMA_NUM_PREDICT: ${OLLAMA_NUM_PREDICT:-256}
      OLLAMA_TEMPERATURE: ${OLLAMA_TEMPERATURE:-0.2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/healthcheck/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    develop:
      watch:
        - action: rebuild
          path: ./backend

  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-cosmocargo}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5051:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@cosmocargo.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      # Model to ensure is available at startup
      OLLAMA_MODEL: gemma3:12b
      OLLAMA_HOST: 0.0.0.0:11434
    entrypoint: ["ollama"]
    command: ["serve"]
    gpus: all
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ollama_data:/root/.ollama

  ollama-pull:
    image: ollama/ollama:latest
    depends_on:
      ollama:
        condition: service_healthy # waits until the Ollama server is up
    environment:
      OLLAMA_HOST: http://ollama:11434 # talk to the running server
    entrypoint: ["ollama"] # run the CLI directly
    command: ["pull", "gemma3:12b"] # pull the model and exit 0 (no-op if already present)
    restart: "no"

volumes:
  postgres_data:
  pgadmin_data:
  ollama_data:
